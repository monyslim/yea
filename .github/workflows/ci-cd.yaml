name: CI

on:
  push:
    branches:
      - master

jobs:
  Build:
    name: Build and Save Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Generate Version Number
        id: version
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          VERSION="v${TIMESTAMP}_${RANDOM}"
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        id: build
        env:
          image_name: test-image
          username: monyslim
        run: |
          docker build -t $username/$image_name:${{ env.APP_VERSION }} . 2>&1 | tee -a workflow_logs.txt
          docker save -o test-image_${{ env.APP_VERSION }}.tar $username/$image_name:${{ env.APP_VERSION }}

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: test-image_${{ env.APP_VERSION }}.tar

      - name: Upload Logs for Debugging
        uses: actions/upload-artifact@v3
        with:
          name: workflow-logs
          path: workflow_logs.txt

    outputs:
      app_version: ${{ steps.version.outputs.app_version }}

  Deploy:
    name: Deploy Docker Image
    runs-on: self-hosted
    needs: Build

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Load Docker Image
        run: |
          docker load -i test-image_${{ needs.Build.outputs.app_version }}.tar | tee -a workflow_logs.txt

      - name: Run Docker Container
        run: |
          docker run -d -p 8082:3000 monyslim/test-image:${{ needs.Build.outputs.app_version }} | tee -a workflow_logs.txt

  GenerateReport:
    name: Generate Metrics Report
    runs-on: ubuntu-latest
    needs: [Build, Deploy]

    steps:
      - name: Download Logs
        uses: actions/download-artifact@v3
        with:
          name: workflow-logs
          path: .

      - name: Evaluate Metrics and Generate Report
        run: |
          # Initialize Metrics
          build_success=0
          artifact_creation=0
          deployment_success=0
          total_score=0

          # Read Logs
          log_file="workflow_logs.txt"
          report_file="student_workflow_report.txt"

          echo "Evaluating Metrics..."
          
          if grep -q "Successfully built" "$log_file"; then
              build_success=30
          fi

          if grep -q "Upload Artifact" "$log_file" && grep -q "artifact uploaded" "$log_file"; then
              artifact_creation=40
          fi

          if grep -q "docker run" "$log_file"; then
              deployment_success=30
          fi

          total_score=$((build_success + artifact_creation + deployment_success))

          # Generate Report
          cat <<EOF > "$report_file"
CI/CD Workflow Evaluation Report
================================
Build Success (%): $build_success
Artifact Creation and Upload (%): $artifact_creation
Deployment Success (%): $deployment_success

Total Score (%): $total_score
EOF
          echo "Report generated successfully at $report_file."

      - name: Upload Metrics Report
        uses: actions/upload-artifact@v3
        with:
          name: student-workflow-metrics-report
          path: student_workflow_report.txt
