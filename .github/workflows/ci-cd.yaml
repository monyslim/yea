name: CI

on:
  push:
    branches:
      - master  # When a push is made to the master branch, run this workflow
  workflow_dispatch:  # Allows manual triggering from the GitHub Actions UI

jobs:
  Build:
    name: instance-build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Generate Version Number
      - name: Generate Version Number
        id: version
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          VERSION="v${TIMESTAMP}_${RANDOM}"
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV  # Set environment variable
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT  # Set job output

      # Step 3: Build the Docker Image
      - name: Build the Docker Image
        env:
          image_name: test-image
          username: dapper01
          APP_VERSION: ${{ steps.version.outputs.app_version }}
        run: |
          docker build -t $username/$image_name:${{ env.APP_VERSION }} .
          docker save -o test-image_${{ env.APP_VERSION }}.tar $username/$image_name:${{ env.APP_VERSION }}

      # Step 4: Upload Docker Image as Artifact
      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: test-image_${{ env.APP_VERSION }}.tar

    outputs:
      app_version: ${{ steps.version.outputs.app_version }}

  Deploy:
    name: Deploy Docker Image
    runs-on: self-hosted
    needs: Build
    env:
      username: dapper01
      image_name: test-image
    steps:
      # Step 1: Download Docker Image Artifact
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      # Step 2: Verify Artifact Download
      - name: Verify Artifact Download
        run: |
          ls -al
          if [ -f "test-image_${{ needs.Build.outputs.app_version }}.tar" ]; then
            echo "Artifact found"
          else
            echo "Artifact not found"
            exit 1
          fi

      # Step 3: Load Docker Image
      - name: Load Docker Image
        run: |
          docker load -i test-image_${{ needs.Build.outputs.app_version }}.tar

      # Step 4: Verify Loaded Docker Image
      - name: Verify Loaded Docker Image
        run: |
          docker images

      # Step 5: Print Image Detail
      - name: Print Image Detail
        run: |
          echo "username: $username"
          echo "image_name: $image_name"
          echo "app_version: ${{ needs.Build.outputs.app_version }}"

      # Step 6: Stop Containers Using Port 8082 (if any)
      - name: Stop Containers Using Port 8082 (if any)
        run: |
          CONTAINER_ID=$(docker ps --filter "publish=8082" -q)
          if [ -n "$CONTAINER_ID" ]; then
            echo "Stopping container $CONTAINER_ID"
            docker stop $CONTAINER_ID
          else
            echo "No container found using port 8082"
          fi

      # # Step 7: Run Docker Containers
      # - name: Run Docker Containers
      #   run: |
      #     echo "Running container with image: $username/$image_name:${{ needs.Build.outputs.app_version }}"
      #     docker run -d -p 8082:3000 $username/$image_name:${{ needs.Build.outputs.app_version }}

      # # Step 8: Send Email Notification
      # - name: Send email notification
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     secure: true
      #     username: prcenturionboy@gmail.com
      #     password: ${{ secrets.EMAIL_PASSWORD }}
      #     subject: "Docker Image Deployed from Artifact"
      #     to: "monyslim@outlook.com"
      #     from: "Mr David Agba DevOps"
      #     body: |
      #       Hello,
      #       The latest version of the Docker image (version: ${{ needs.Build.outputs.app_version }}) has been deployed from the artifact.

  RunMetrics:
    name: Run Metrics Script and Generate Report
    runs-on: ubuntu-latest
    needs: Deploy

    steps:
      # Step 1: Checkout the repository (to get access to bash_metrics.sh)
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Run the Metrics Script
      - name: Run Metrics Script
        run: |
          chmod +x test.sh
          ./test.sh  # Run the metrics script to generate the report

      # Step 3: Upload Metrics Report as Artifact
      - name: Upload Metrics Report
        uses: actions/upload-artifact@v3
        with:
          name: student-workflow-metrics-report
          path: ./student_workflow_report.txt  # Path to the report generated by the metrics script